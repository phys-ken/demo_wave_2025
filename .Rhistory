reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
# パラメータ設定
L = 10  # 波の範囲
N = 100  # 空間分割数
x = np.linspace(0, L, N)  # x座標
k = 2 * np.pi / L  # 波数
omega = 2  # 角周波数
# 初期化関数
def init():
line.set_ydata(np.zeros_like(x))
return line,
# アニメーション更新関数
def update(frame):
t = frame * 0.05
y = 2 * np.sin(k * x) * np.cos(omega * t)
line.set_ydata(y)
return line,
# プロット準備
fig, ax = plt.subplots()
ax.set_ylim(-2, 2)
ax.set_xlim(0, L)
ax.set_xlabel("x")
ax.set_ylabel("Amplitude")
line, = ax.plot(x, np.zeros_like(x), 'b')
# アニメーションの実行
ani = animation.FuncAnimation(fig, update, frames=200, init_func=init, blit=True)
plt.show()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
# パラメータ設定
L = 10  # 波の範囲
N = 100  # 空間分割数
x = np.linspace(0, L, N)  # x座標
k = 2 * np.pi / L  # 波数
omega = 2  # 角周波数
# 初期化関数
def init():
line.set_ydata(np.zeros_like(x))
return line,
# アニメーション更新関数
def update(frame):
t = frame * 0.05
y = 2 * np.sin(k * x) * np.cos(omega * t)
line.set_ydata(y)
return line,
# プロット準備
fig, ax = plt.subplots()
ax.set_ylim(-2, 2)
ax.set_xlim(0, L)
ax.set_xlabel("x")
ax.set_ylabel("Amplitude")
line, = ax.plot(x, np.zeros_like(x), 'b')
# アニメーションの実行
ani = animation.FuncAnimation(fig, update, frames=200, init_func=init, blit=True)
plt.show()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
# パラメータ設定
L = 10  # 波の範囲
N = 100  # 空間分割数
x = np.linspace(0, L, N)  # x座標
k = 2 * np.pi / L  # 波数
omega = 2  # 角周波数
# 初期化関数
def init():
line.set_ydata(np.zeros_like(x))
return line,
# アニメーション更新関数
def update(frame):
t = frame * 0.05
y = 2 * np.sin(k * x) * np.cos(omega * t)
line.set_ydata(y)
return line,
# プロット準備
fig, ax = plt.subplots()
ax.set_ylim(-2, 2)
ax.set_xlim(0, L)
ax.set_xlabel("x")
ax.set_ylabel("Amplitude")
line, = ax.plot(x, np.zeros_like(x), 'b')
# アニメーションの実行
ani = animation.FuncAnimation(fig, update, frames=200, init_func=init, blit=True)
plt.show()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
# パラメータ設定
L = 10          # 波の範囲
N = 100         # 空間分割数
x = np.linspace(0, L, N)
k = 2 * np.pi / L  # 波数
omega = 2       # 角周波数
fig, ax = plt.subplots()
ax.set_ylim(-2, 2)
ax.set_xlim(0, L)
ax.set_xlabel("x")
ax.set_ylabel("Amplitude")
line, = ax.plot(x, np.zeros_like(x), 'b')
def init():
line.set_ydata(np.zeros_like(x))
return line,
def update(frame):
t = frame * 0.05
y = 2 * np.sin(k * x) * np.cos(omega * t)
line.set_ydata(y)
return line,
ani = animation.FuncAnimation(
fig, update, frames=200, init_func=init, blit=True
)
# ---- ここからHTMLファイルに書き出す ----
html_str = ani.to_jshtml()  # JavaScript + HTML形式として出力
with open("standing_wave.html", "w", encoding="utf-8") as f:
f.write(html_str)
import numpy as np
import matplotlib.pyplot as plt
t = np.linspace(0, 6*np.pi, 500)
r = 1 - t/(6*np.pi)              # 半径が徐々に小さくなる
colors = plt.cm.viridis(np.linspace(0,1,len(t)))
plt.figure(figsize=(5,5))
for i in range(len(t)-1):
plt.plot(
[r[i]*np.cos(t[i]),   r[i+1]*np.cos(t[i+1])],
[r[i]*np.sin(t[i]),   r[i+1]*np.sin(t[i+1])],
color=colors[i],
linewidth=2
)
plt.axis('equal')
plt.axis('off')  # 軸表示を消してアートっぽく
plt.show()
import numpy as np
import matplotlib.pyplot as plt
# 螺旋を描画する
t = np.linspace(0, 6*np.pi, 500)
r = 1 - t/(6*np.pi)
colors = plt.cm.viridis(np.linspace(0, 1, len(t)))
plt.figure(figsize=(5, 5))
for i in range(len(t) - 1):
plt.plot(
[r[i]*np.cos(t[i]), r[i+1]*np.cos(t[i+1])],
[r[i]*np.sin(t[i]), r[i+1]*np.sin(t[i+1])],
color=colors[i],
linewidth=2
)
plt.axis('equal')
plt.axis('off')
plt.show()
import numpy as np
import matplotlib.pyplot as plt
# 螺旋を描画する
t = np.linspace(0, 6*np.pi, 500)
r = 1 - t/(6*np.pi)
colors = plt.cm.viridis(np.linspace(0, 1, len(t)))
plt.figure(figsize=(5, 5))
# プロット結果を変数に受け取らないようにして、出力抑制
_ = [
plt.plot(
[r[i]*np.cos(t[i]), r[i+1]*np.cos(t[i+1])],
[r[i]*np.sin(t[i]), r[i+1]*np.sin(t[i+1])],
color=colors[i],
linewidth=2
)
for i in range(len(t) - 1)
]
plt.axis('equal')
plt.axis('off')
plt.show()
import numpy as np
import matplotlib.pyplot as plt
# 螺旋を描画する
t = np.linspace(0, 6*np.pi, 500)
r = 1 - t/(6*np.pi)
colors = plt.cm.viridis(np.linspace(0, 1, len(t)))
plt.figure(figsize=(5, 5))
_ = [
plt.plot(
[r[i]*np.cos(t[i]), r[i+1]*np.cos(t[i+1])],
[r[i]*np.sin(t[i]), r[i+1]*np.sin(t[i+1])],
color=colors[i],
linewidth=2
)
for i in range(len(t) - 1)
]
_ = plt.axis('equal')  # 返り値を無視して描画のみ
_ = plt.axis('off')    # 軸非表示の返り値を無視
_ = plt.show()         # plt.show()の返り値を無視
